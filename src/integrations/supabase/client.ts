// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || 'https://yaacbkoasdxrwavbwsbu.supabase.co';
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlhYWNia29hc2R4cndhdmJ3c2J1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3MTY4MzQsImV4cCI6MjA2MDI5MjgzNH0.yE1Xdci3eqP9vsVVPzYw9ihd5cYdLi985D8p1NSU-lk';

if (!SUPABASE_URL) throw new Error('VITE_SUPABASE_URL is required');
if (!SUPABASE_PUBLISHABLE_KEY) throw new Error('VITE_SUPABASE_ANON_KEY is required');

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'qr-attendance-storage-key',
    detectSessionInUrl: true,
    flowType: 'pkce',
    debug: true // This helps with debugging authentication issues
  },
  global: {
    headers: {
      'Content-Type': 'application/json'
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Error handling utility for Supabase operations
export const handleSupabaseError = (error: unknown, fallbackMessage: string = "Operation failed"): string => {
  console.error("Supabase error:", error);
  
  if (error instanceof Error) {
    // Return a user-friendly error message
    if (error.message.includes("network") || error.message.includes("fetch")) {
      return "Network error. Please check your connection.";
    } else if (error.message.includes("not found") || error.message.includes("404")) {
      return "The requested resource was not found.";
    } else if (error.message.includes("permission") || error.message.includes("403") || error.message.includes("unauthorized")) {
      return "You don't have permission for this operation.";
    } else if (error.message.includes("timeout")) {
      return "Request timed out. Please try again.";
    } else if (error.message.includes("connection")) {
      return "Database connection error. Please check your internet connection.";
    } else if (error.message.length < 100) { // Only return original message if it's short/readable
      return error.message;
    }
  }
  
  return fallbackMessage;
};

// Utility function to test Supabase connection
export const testSupabaseConnection = async (): Promise<boolean> => {
  try {
    const { data, error } = await supabase.from('employees').select('count', { count: 'exact' }).limit(1);
    return !error;
  } catch (error) {
    console.error('Supabase connection test failed:', error);
    return false;
  }
};
